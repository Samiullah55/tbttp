{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/10billiontrees/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"D:/10billiontrees/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/10billiontrees/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"D:/10billiontrees/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"D:/10billiontrees/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/10billiontrees/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"D:/10billiontrees/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/10billiontrees/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"D:/10billiontrees/frontend/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"D:/10billiontrees/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"D:/10billiontrees/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @remix-run/router v1.0.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: function createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({\n          action: action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: location\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    var historyState = getHistoryState(location);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: location\n      });\n    }\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        id: id\n      });\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  routes.forEach(function (route, index) {\n    var meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  });\n  return branches;\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return path.replace(/:(\\w+)/g, function (_, key) {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, function (_, prefix, __, str) {\n    var star = \"*\";\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    paramNames = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref11 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref11.pathname,\n    _ref11$search = _ref11.search,\n    search = _ref11$search === void 0 ? \"\" : _ref11$search,\n    _ref11$hash = _ref11.hash,\n    hash = _ref11$hash === void 0 ? \"\" : _ref11$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref12 = _slicedToArray(_ref, 2),\n        key = _ref12[0],\n        value = _ref12[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeys.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      var subscriber = this.subscriber;\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        subscriber && subscriber(false);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      subscriber && subscriber(false);\n      return data;\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      this.subscriber = fn;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this3 = this;\n      this.controller.abort();\n      this.pendingKeys.forEach(function (v, k) {\n        return _this3.pendingKeys.delete(k);\n      });\n      var subscriber = this.subscriber;\n      subscriber && subscriber(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this4 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              aborted = false;\n              if (this.done) {\n                _context.next = 7;\n                break;\n              }\n              onAbort = function onAbort() {\n                return _this4.cancel();\n              };\n              signal.addEventListener(\"abort\", onAbort);\n              _context.next = 6;\n              return new Promise(function (resolve) {\n                _this4.subscribe(function (aborted) {\n                  signal.removeEventListener(\"abort\", onAbort);\n                  if (aborted || _this4.done) {\n                    resolve(aborted);\n                  }\n                });\n              });\n            case 6:\n              aborted = _context.sent;\n            case 7:\n              return _context.abrupt(\"return\", aborted);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeys.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref13 = _slicedToArray(_ref2, 2),\n          key = _ref13[0],\n          value = _ref13[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data) {\n  _classCallCheck(this, ErrorResponse);\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.data = data;\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  var initialScrollRestored = false;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var _getNotFoundMatches = getNotFoundMatches(dataRoutes),\n      matches = _getNotFoundMatches.matches,\n      route = _getNotFoundMatches.route,\n      error = _getNotFoundMatches.error;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  var initialized = !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null;\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for;\n\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    var newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, location, historyAction, preventScrollReset;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof to === \"number\")) {\n              _context2.next = 3;\n              break;\n            }\n            init.history.go(to);\n            return _context2.abrupt(\"return\");\n          case 3:\n            _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n            location = createLocation(state.location, path, opts && opts.state);\n            historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n            preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n            _context2.next = 9;\n            return startNavigation(historyAction, location, {\n              submission: submission,\n              // Send through the formData serialization error if we have one so we can\n              // render at the right error boundary after we match routes\n              pendingError: error,\n              preventScrollReset: preventScrollReset,\n              replace: opts && opts.replace\n            });\n          case 9:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var loadingNavigation, matches, _getNotFoundMatches2, notFoundMatches, _route, _error, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            // Abort any in-progress navigations and start a new one. Unset any ongoing\n            // uninterrupted revalidations unless told otherwise, since we want this\n            // new navigation to update history normally\n            pendingNavigationController && pendingNavigationController.abort();\n            pendingNavigationController = null;\n            pendingAction = historyAction;\n            isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n            // and track whether we should reset scroll on completion\n\n            saveScrollPosition(state.location, state.matches);\n            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n            loadingNavigation = opts && opts.overrideNavigation;\n            matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n            if (matches) {\n              _context3.next = 13;\n              break;\n            }\n            _getNotFoundMatches2 = getNotFoundMatches(dataRoutes), notFoundMatches = _getNotFoundMatches2.matches, _route = _getNotFoundMatches2.route, _error = _getNotFoundMatches2.error; // Cancel all pending deferred on 404s since we don't keep any routes\n            cancelActiveDeferreds();\n            completeNavigation(location, {\n              matches: notFoundMatches,\n              loaderData: {},\n              errors: _defineProperty({}, _route.id, _error)\n            });\n            return _context3.abrupt(\"return\");\n          case 13:\n            if (!isHashChangeOnly(state.location, location)) {\n              _context3.next = 16;\n              break;\n            }\n            completeNavigation(location, {\n              matches: matches\n            });\n            return _context3.abrupt(\"return\");\n          case 16:\n            // Create a controller/Request for this navigation\n\n            pendingNavigationController = new AbortController();\n            request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n            if (!(opts && opts.pendingError)) {\n              _context3.next = 22;\n              break;\n            }\n            // If we have a pendingError, it means the user attempted a GET submission\n            // with binary FormData so assign here and skip to handleLoaders.  That\n            // way we handle calling loaders above the boundary etc.  It's not really\n            // different from an actionError in that sense.\n            pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n            _context3.next = 32;\n            break;\n          case 22:\n            if (!(opts && opts.submission)) {\n              _context3.next = 32;\n              break;\n            }\n            _context3.next = 25;\n            return handleAction(request, location, opts.submission, matches, {\n              replace: opts.replace\n            });\n          case 25:\n            actionOutput = _context3.sent;\n            if (!actionOutput.shortCircuited) {\n              _context3.next = 28;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 28:\n            pendingActionData = actionOutput.pendingActionData;\n            pendingError = actionOutput.pendingActionError;\n            navigation = _extends({\n              state: \"loading\",\n              location: location\n            }, opts.submission);\n            loadingNavigation = navigation;\n          case 32:\n            _context3.next = 34;\n            return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n          case 34:\n            _yield$handleLoaders = _context3.sent;\n            shortCircuited = _yield$handleLoaders.shortCircuited;\n            loaderData = _yield$handleLoaders.loaderData;\n            errors = _yield$handleLoaders.errors;\n            if (!shortCircuited) {\n              _context3.next = 40;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 40:\n            // Clean up now that the action/loaders have completed.  Don't clean up if\n            // we short circuited because pendingNavigationController will have already\n            // been assigned to a new controller for the next navigation\n\n            pendingNavigationController = null;\n            completeNavigation(location, {\n              matches: matches,\n              loaderData: loaderData,\n              errors: errors\n            });\n          case 42:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, redirectNavigation, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            interruptActiveLoads(); // Put us in a submitting state\n            navigation = _extends({\n              state: \"submitting\",\n              location: location\n            }, submission);\n            updateState({\n              navigation: navigation\n            }); // Call our action and get the result\n            actionMatch = getTargetMatch(matches, location);\n            if (actionMatch.route.action) {\n              _context4.next = 8;\n              break;\n            }\n            result = getMethodNotAllowedResult(location);\n            _context4.next = 13;\n            break;\n          case 8:\n            _context4.next = 10;\n            return callLoaderOrAction(\"action\", request, actionMatch);\n          case 10:\n            result = _context4.sent;\n            if (!request.signal.aborted) {\n              _context4.next = 13;\n              break;\n            }\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 13:\n            if (!isRedirectResult(result)) {\n              _context4.next = 18;\n              break;\n            }\n            redirectNavigation = _extends({\n              state: \"loading\",\n              location: createLocation(state.location, result.location)\n            }, submission);\n            _context4.next = 17;\n            return startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n          case 17:\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 18:\n            if (!isErrorResult(result)) {\n              _context4.next = 22;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n            // action threw an error that'll be rendered in an errorElement, we fall\n            // back to PUSH so that the user can use the back button to get back to\n            // the pre-submission form location to try again\n            if ((opts && opts.replace) !== true) {\n              pendingAction = Action.Push;\n            }\n            return _context4.abrupt(\"return\", {\n              pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n          case 22:\n            if (!isDeferredResult(result)) {\n              _context4.next = 24;\n              break;\n            }\n            throw new Error(\"defer() is not supported in actions\");\n          case 24:\n            return _context4.abrupt(\"return\", {\n              pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n            });\n          case 25:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, redirectNavigation, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // Figure out the right navigation we want to use for data loading\n            loadingNavigation = overrideNavigation;\n            if (!loadingNavigation) {\n              navigation = {\n                state: \"loading\",\n                location: location,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              loadingNavigation = navigation;\n            }\n            _getMatchesToLoad = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n            // about to reload.  Note that if this is an action reload we would have\n            // already cancelled all pending deferreds so this would be a no-op\n            cancelActiveDeferreds(function (routeId) {\n              return !(matches && matches.some(function (m) {\n                return m.route.id === routeId;\n              })) || matchesToLoad && matchesToLoad.some(function (m) {\n                return m.route.id === routeId;\n              });\n            }); // Short circuit if we have no loaders to run\n            if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n              _context5.next = 7;\n              break;\n            }\n            completeNavigation(location, {\n              matches: matches,\n              loaderData: mergeLoaderData(state.loaderData, {}, matches),\n              // Commit pending error if we're short circuiting\n              errors: pendingError || null,\n              actionData: pendingActionData || null\n            });\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 7:\n            // If this is an uninterrupted revalidation, we remain in our current idle\n            // state.  If not, we need to switch to our loading state and load data,\n            // preserving any new action data or existing action data (in the case of\n            // a revalidation interrupting an actionReload)\n\n            if (!isUninterruptedRevalidation) {\n              revalidatingFetchers.forEach(function (_ref2) {\n                var _ref14 = _slicedToArray(_ref2, 1),\n                  key = _ref14[0];\n                var fetcher = state.fetchers.get(key);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: fetcher && fetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                };\n                state.fetchers.set(key, revalidatingFetcher);\n              });\n              updateState(_extends({\n                navigation: loadingNavigation,\n                actionData: pendingActionData || state.actionData || null\n              }, revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n            }\n            pendingNavigationLoadId = ++incrementingLoadId;\n            revalidatingFetchers.forEach(function (_ref3) {\n              var _ref15 = _slicedToArray(_ref3, 1),\n                key = _ref15[0];\n              return fetchControllers.set(key, pendingNavigationController);\n            });\n            _context5.next = 12;\n            return callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n          case 12:\n            _yield$callLoadersAnd = _context5.sent;\n            results = _yield$callLoadersAnd.results;\n            loaderResults = _yield$callLoadersAnd.loaderResults;\n            fetcherResults = _yield$callLoadersAnd.fetcherResults;\n            if (!request.signal.aborted) {\n              _context5.next = 18;\n              break;\n            }\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 18:\n            // Clean up _after_ loaders have completed.  Don't clean up if we short\n            // circuited because fetchControllers would have been aborted and\n            // reassigned to new controllers for the next navigation\n\n            revalidatingFetchers.forEach(function (_ref4) {\n              var _ref16 = _slicedToArray(_ref4, 1),\n                key = _ref16[0];\n              return fetchControllers.delete(key);\n            }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context5.next = 25;\n              break;\n            }\n            redirectNavigation = getLoaderRedirect(state, redirect);\n            _context5.next = 24;\n            return startRedirectNavigation(redirect, redirectNavigation, replace);\n          case 24:\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 25:\n            // Process and commit output from loaders\n            _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n            activeDeferreds.forEach(function (deferredData, routeId) {\n              deferredData.subscribe(function (aborted) {\n                // Note: No need to updateState here since the TrackedPromise on\n                // loaderData is stable across resolve/reject\n                // Remove this instance if we were aborted or if promises have settled\n                if (aborted || deferredData.done) {\n                  activeDeferreds.delete(routeId);\n                }\n              });\n            });\n            markFetchRedirectsDone();\n            didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n            return _context5.abrupt(\"return\", _extends({\n              loaderData: loaderData,\n              errors: errors\n            }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n              fetchers: new Map(state.fetchers)\n            } : {}));\n          case 30:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n      path = _normalizeNavigateOpt.path,\n      submission = _normalizeNavigateOpt.submission;\n    var match = getTargetMatch(matches, path);\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, submission) {\n      var _getMethodNotAllowedR, _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, redirectNavigation, nextLocation, revalidationRequest, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _redirectNavigation, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            interruptActiveLoads();\n            fetchLoadMatches.delete(key);\n            if (match.route.action) {\n              _context6.next = 6;\n              break;\n            }\n            _getMethodNotAllowedR = getMethodNotAllowedResult(path), _error2 = _getMethodNotAllowedR.error;\n            setFetcherError(key, routeId, _error2);\n            return _context6.abrupt(\"return\");\n          case 6:\n            // Put this fetcher into it's submitting state\n            existingFetcher = state.fetchers.get(key);\n            fetcher = _extends({\n              state: \"submitting\"\n            }, submission, {\n              data: existingFetcher && existingFetcher.data\n            });\n            state.fetchers.set(key, fetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the action for the fetcher\n            abortController = new AbortController();\n            fetchRequest = createRequest(path, abortController.signal, submission);\n            fetchControllers.set(key, abortController);\n            _context6.next = 15;\n            return callLoaderOrAction(\"action\", fetchRequest, match);\n          case 15:\n            actionResult = _context6.sent;\n            if (!fetchRequest.signal.aborted) {\n              _context6.next = 19;\n              break;\n            }\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-submit which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            return _context6.abrupt(\"return\");\n          case 19:\n            if (!isRedirectResult(actionResult)) {\n              _context6.next = 29;\n              break;\n            }\n            fetchControllers.delete(key);\n            fetchRedirectIds.add(key);\n            loadingFetcher = _extends({\n              state: \"loading\"\n            }, submission, {\n              data: undefined\n            });\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            redirectNavigation = _extends({\n              state: \"loading\",\n              location: createLocation(state.location, actionResult.location)\n            }, submission);\n            _context6.next = 28;\n            return startRedirectNavigation(actionResult, redirectNavigation);\n          case 28:\n            return _context6.abrupt(\"return\");\n          case 29:\n            if (!isErrorResult(actionResult)) {\n              _context6.next = 32;\n              break;\n            }\n            setFetcherError(key, routeId, actionResult.error);\n            return _context6.abrupt(\"return\");\n          case 32:\n            if (isDeferredResult(actionResult)) {\n              invariant(false, \"defer() is not supported in actions\");\n            } // Start the data load for current matches, or the next location if we're\n            // in the middle of a navigation\n            nextLocation = state.navigation.location || state.location;\n            revalidationRequest = createRequest(nextLocation, abortController.signal);\n            matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n            invariant(matches, \"Didn't find any matches after fetcher action\");\n            loadId = ++incrementingLoadId;\n            fetchReloadIds.set(key, loadId);\n            loadFetcher = _extends({\n              state: \"loading\",\n              data: actionResult.data\n            }, submission);\n            state.fetchers.set(key, loadFetcher);\n            _getMatchesToLoad3 = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, _defineProperty({}, match.route.id, actionResult.data), undefined,\n            // No need to send through errors since we short circuit above\n            fetchLoadMatches), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n            // current fetcher which we want to keep in it's current loading state which\n            // contains it's action submission info + action data\n            revalidatingFetchers.filter(function (_ref5) {\n              var _ref17 = _slicedToArray(_ref5, 1),\n                staleKey = _ref17[0];\n              return staleKey !== key;\n            }).forEach(function (_ref6) {\n              var _ref18 = _slicedToArray(_ref6, 1),\n                staleKey = _ref18[0];\n              var existingFetcher = state.fetchers.get(staleKey);\n              var revalidatingFetcher = {\n                state: \"loading\",\n                data: existingFetcher && existingFetcher.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              };\n              state.fetchers.set(staleKey, revalidatingFetcher);\n              fetchControllers.set(staleKey, abortController);\n            });\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            _context6.next = 46;\n            return callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n          case 46:\n            _yield$callLoadersAnd2 = _context6.sent;\n            results = _yield$callLoadersAnd2.results;\n            loaderResults = _yield$callLoadersAnd2.loaderResults;\n            fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n            if (!abortController.signal.aborted) {\n              _context6.next = 52;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 52:\n            fetchReloadIds.delete(key);\n            fetchControllers.delete(key);\n            revalidatingFetchers.forEach(function (_ref7) {\n              var _ref19 = _slicedToArray(_ref7, 1),\n                staleKey = _ref19[0];\n              return fetchControllers.delete(staleKey);\n            });\n            redirect = findRedirect(results);\n            if (!redirect) {\n              _context6.next = 61;\n              break;\n            }\n            _redirectNavigation = getLoaderRedirect(state, redirect);\n            _context6.next = 60;\n            return startRedirectNavigation(redirect, _redirectNavigation);\n          case 60:\n            return _context6.abrupt(\"return\");\n          case 61:\n            // Process and commit output from loaders\n            _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n            doneFetcher = {\n              state: \"idle\",\n              data: actionResult.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined\n            };\n            state.fetchers.set(key, doneFetcher);\n            didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n            // more recent than the navigation, we want the newer data so abort the\n            // navigation and complete it with the fetcher data\n            if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n              invariant(pendingAction, \"Expected pending action\");\n              pendingNavigationController && pendingNavigationController.abort();\n              completeNavigation(state.navigation.location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors,\n                fetchers: new Map(state.fetchers)\n              });\n            } else {\n              // otherwise just update with the fetcher data, preserving any existing\n              // loaderData for loaders that did not need to reload.  We have to\n              // manually merge here since we aren't going through completeNavigation\n              updateState(_extends({\n                errors: errors,\n                loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n              }, didAbortFetchLoads ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n              isRevalidationRequired = false;\n            }\n          case 66:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x25, _x26, _x27, _x28) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, redirectNavigation, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n            loadingFetcher = {\n              state: \"loading\",\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined,\n              data: existingFetcher && existingFetcher.data\n            };\n            state.fetchers.set(key, loadingFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            }); // Call the loader for this fetcher route match\n            abortController = new AbortController();\n            fetchRequest = createRequest(path, abortController.signal);\n            fetchControllers.set(key, abortController);\n            _context7.next = 9;\n            return callLoaderOrAction(\"loader\", fetchRequest, match);\n          case 9:\n            result = _context7.sent;\n            if (!isDeferredResult(result)) {\n              _context7.next = 17;\n              break;\n            }\n            _context7.next = 13;\n            return resolveDeferredData(result, fetchRequest.signal, true);\n          case 13:\n            _context7.t0 = _context7.sent;\n            if (_context7.t0) {\n              _context7.next = 16;\n              break;\n            }\n            _context7.t0 = result;\n          case 16:\n            result = _context7.t0;\n          case 17:\n            // We can delete this so long as we weren't aborted by ou our own fetcher\n            // re-load which would have put _new_ controller is in fetchControllers\n\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            if (!fetchRequest.signal.aborted) {\n              _context7.next = 20;\n              break;\n            }\n            return _context7.abrupt(\"return\");\n          case 20:\n            if (!isRedirectResult(result)) {\n              _context7.next = 25;\n              break;\n            }\n            redirectNavigation = getLoaderRedirect(state, result);\n            _context7.next = 24;\n            return startRedirectNavigation(result, redirectNavigation);\n          case 24:\n            return _context7.abrupt(\"return\");\n          case 25:\n            if (!isErrorResult(result)) {\n              _context7.next = 30;\n              break;\n            }\n            boundaryMatch = findNearestBoundary(state.matches, routeId);\n            state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n            // do we need to behave any differently with our non-redirect errors?\n            // What if it was a non-redirect Response?\n\n            updateState({\n              fetchers: new Map(state.fetchers),\n              errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n            });\n            return _context7.abrupt(\"return\");\n          case 30:\n            invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n            doneFetcher = {\n              state: \"idle\",\n              data: result.data,\n              formMethod: undefined,\n              formAction: undefined,\n              formEncType: undefined,\n              formData: undefined\n            };\n            state.fetchers.set(key, doneFetcher);\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n          case 34:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x29, _x30, _x31) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(redirect, navigation, replace) {\n      var redirectHistoryAction;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            if (redirect.revalidate) {\n              isRevalidationRequired = true;\n            }\n            invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n            // redirect until the action/loaders have settled\n\n            pendingNavigationController = null;\n            redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n            _context8.next = 6;\n            return startNavigation(redirectHistoryAction, navigation.location, {\n              overrideNavigation: navigation\n            });\n          case 6:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x32, _x33, _x34, _x35) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(currentMatches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (m) {\n              return callLoaderOrAction(\"loader\", request, m);\n            })), _toConsumableArray(fetchersToLoad.map(function (_ref8) {\n              var _ref20 = _slicedToArray(_ref8, 3),\n                href = _ref20[1],\n                match = _ref20[2];\n              return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n            }))));\n          case 2:\n            results = _context9.sent;\n            loaderResults = results.slice(0, matchesToLoad.length);\n            fetcherResults = results.slice(matchesToLoad.length);\n            _context9.next = 7;\n            return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (_ref9) {\n              var _ref21 = _slicedToArray(_ref9, 3),\n                match = _ref21[2];\n              return match;\n            }), fetcherResults, request.signal, true)]);\n          case 7:\n            return _context9.abrupt(\"return\", {\n              results: results,\n              loaderResults: loaderResults,\n              fetcherResults: fetcherResults\n            });\n          case 8:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    var _iterator = _createForOfIteratorHelper(keys),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var _iterator2 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    markFetchersDone(doneKeys);\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator3 = _createForOfIteratorHelper(fetchReloadIds),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _step3$value = _slicedToArray(_step3.value, 2),\n          key = _step3$value[0],\n          id = _step3$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    createHref: createHref,\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  var dataRoutes = convertRoutesToDataRoutes(routes);\n  function query(_x36) {\n    return _query.apply(this, arguments);\n  }\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(request) {\n      var _yield$queryImpl, location, result;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return queryImpl(request);\n          case 2:\n            _yield$queryImpl = _context10.sent;\n            location = _yield$queryImpl.location;\n            result = _yield$queryImpl.result;\n            if (!(result instanceof Response)) {\n              _context10.next = 7;\n              break;\n            }\n            return _context10.abrupt(\"return\", result);\n          case 7:\n            return _context10.abrupt(\"return\", _extends({\n              location: location\n            }, result));\n          case 8:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x37, _x38) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(request, routeId) {\n      var _yield$queryImpl2, result, error, routeData, value;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.next = 2;\n            return queryImpl(request, routeId);\n          case 2:\n            _yield$queryImpl2 = _context11.sent;\n            result = _yield$queryImpl2.result;\n            if (!(result instanceof Response)) {\n              _context11.next = 6;\n              break;\n            }\n            return _context11.abrupt(\"return\", result);\n          case 6:\n            error = result.errors ? Object.values(result.errors)[0] : undefined;\n            if (!(error !== undefined)) {\n              _context11.next = 11;\n              break;\n            }\n            if (!isRouteErrorResponse(error)) {\n              _context11.next = 10;\n              break;\n            }\n            return _context11.abrupt(\"return\", new Response(error.data, {\n              status: error.status,\n              statusText: error.statusText\n            }));\n          case 10:\n            throw error;\n          case 11:\n            // Pick off the right state value to return\n            routeData = [result.actionData, result.loaderData].find(function (v) {\n              return v;\n            });\n            value = Object.values(routeData || {})[0];\n            if (!isRouteErrorResponse(value)) {\n              _context11.next = 15;\n              break;\n            }\n            return _context11.abrupt(\"return\", new Response(value.data, {\n              status: value.status,\n              statusText: value.statusText\n            }));\n          case 15:\n            return _context11.abrupt(\"return\", value);\n          case 16:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x39, _x40) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, routeId) {\n      var _matchRequest, location, matches, shortCircuitState, _result, result;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n            invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n            _matchRequest = matchRequest(request, routeId), location = _matchRequest.location, matches = _matchRequest.matches, shortCircuitState = _matchRequest.shortCircuitState;\n            _context12.prev = 3;\n            if (!shortCircuitState) {\n              _context12.next = 6;\n              break;\n            }\n            return _context12.abrupt(\"return\", {\n              location: location,\n              result: shortCircuitState\n            });\n          case 6:\n            if (!(request.method !== \"GET\")) {\n              _context12.next = 11;\n              break;\n            }\n            _context12.next = 9;\n            return submit(request, matches, getTargetMatch(matches, location), routeId != null);\n          case 9:\n            _result = _context12.sent;\n            return _context12.abrupt(\"return\", {\n              location: location,\n              result: _result\n            });\n          case 11:\n            _context12.next = 13;\n            return loadRouteData(request, matches, routeId != null);\n          case 13:\n            result = _context12.sent;\n            return _context12.abrupt(\"return\", {\n              location: location,\n              result: _extends({}, result, {\n                actionData: null,\n                actionHeaders: {}\n              })\n            });\n          case 17:\n            _context12.prev = 17;\n            _context12.t0 = _context12[\"catch\"](3);\n            if (!(_context12.t0 instanceof Response)) {\n              _context12.next = 21;\n              break;\n            }\n            return _context12.abrupt(\"return\", {\n              location: location,\n              result: _context12.t0\n            });\n          case 21:\n            throw _context12.t0;\n          case 22:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12, null, [[3, 17]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x41, _x42, _x43, _x44) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, matches, actionMatch, isRouteRequest) {\n      var result, href, method, boundaryMatch, _boundaryMatch, _context13, context;\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            if (actionMatch.route.action) {\n              _context14.next = 5;\n              break;\n            }\n            href = createHref(new URL(request.url));\n            result = getMethodNotAllowedResult(href);\n            _context14.next = 11;\n            break;\n          case 5:\n            _context14.next = 7;\n            return callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n          case 7:\n            result = _context14.sent;\n            if (!request.signal.aborted) {\n              _context14.next = 11;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 11:\n            if (!isRedirectResult(result)) {\n              _context14.next = 13;\n              break;\n            }\n            throw new Response(null, {\n              status: result.status,\n              headers: {\n                Location: result.location\n              }\n            });\n          case 13:\n            if (!isDeferredResult(result)) {\n              _context14.next = 15;\n              break;\n            }\n            throw new Error(\"defer() is not supported in actions\");\n          case 15:\n            if (!isRouteRequest) {\n              _context14.next = 20;\n              break;\n            }\n            if (!isErrorResult(result)) {\n              _context14.next = 19;\n              break;\n            }\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n            return _context14.abrupt(\"return\", {\n              matches: [actionMatch],\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, boundaryMatch.route.id, result.error),\n              // Note: statusCode + headers are unused here since queryRoute will\n              // return the raw Response or value\n              statusCode: 500,\n              loaderHeaders: {},\n              actionHeaders: {}\n            });\n          case 19:\n            return _context14.abrupt(\"return\", {\n              matches: [actionMatch],\n              loaderData: {},\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              errors: null,\n              // Note: statusCode + headers are unused here since queryRoute will\n              // return the raw Response or value\n              statusCode: 200,\n              loaderHeaders: {},\n              actionHeaders: {}\n            });\n          case 20:\n            if (!isErrorResult(result)) {\n              _context14.next = 26;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            _boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n            _context14.next = 24;\n            return loadRouteData(request, matches, isRouteRequest, _defineProperty({}, _boundaryMatch.route.id, result.error));\n          case 24:\n            _context13 = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, _context13, {\n              statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n              actionData: null,\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 26:\n            _context14.next = 28;\n            return loadRouteData(request, matches, isRouteRequest);\n          case 28:\n            context = _context14.sent;\n            return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n              statusCode: result.statusCode\n            } : {}, {\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 30:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x45, _x46, _x47, _x48) {\n    return _loadRouteData.apply(this, arguments);\n  }\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, matches, isRouteRequest, pendingActionError) {\n      var matchesToLoad, results, method, context;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(function (m) {\n              return m.route.loader;\n            }); // Short circuit if we have no loaders to run\n            if (!(matchesToLoad.length === 0)) {\n              _context15.next = 3;\n              break;\n            }\n            return _context15.abrupt(\"return\", {\n              matches: matches,\n              loaderData: {},\n              errors: pendingActionError || null,\n              statusCode: 200,\n              loaderHeaders: {}\n            });\n          case 3:\n            _context15.next = 5;\n            return Promise.all(_toConsumableArray(matchesToLoad.map(function (m) {\n              return callLoaderOrAction(\"loader\", request, m, true, isRouteRequest);\n            })));\n          case 5:\n            results = _context15.sent;\n            if (!request.signal.aborted) {\n              _context15.next = 9;\n              break;\n            }\n            method = isRouteRequest ? \"queryRoute\" : \"query\";\n            throw new Error(method + \"() call aborted\");\n          case 9:\n            // Can't do anything with these without the Remix side of things, so just\n            // cancel them for now\n\n            results.forEach(function (result) {\n              if (isDeferredResult(result)) {\n                result.deferredData.cancel();\n              }\n            }); // Process and commit output from loaders\n            context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n            return _context15.abrupt(\"return\", _extends({}, context, {\n              matches: matches\n            }));\n          case 12:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n  function matchRequest(req, routeId) {\n    var url = new URL(req.url);\n    var location = createLocation(\"\", createPath(url), null, \"default\");\n    var matches = matchRoutes(dataRoutes, location);\n    if (matches && routeId) {\n      matches = matches.filter(function (m) {\n        return m.route.id === routeId;\n      });\n    } // Short circuit with a 404 if we match nothing\n\n    if (!matches) {\n      var _getNotFoundMatches3 = getNotFoundMatches(dataRoutes),\n        notFoundMatches = _getNotFoundMatches3.matches,\n        route = _getNotFoundMatches3.route,\n        error = _getNotFoundMatches3.error;\n      return {\n        location: location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: _defineProperty({}, route.id, error),\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n    return {\n      location: location,\n      matches: matches\n    };\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path: path\n    };\n  } // Create a Submission on non-GET navigations\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path: path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n  if (!opts.formData) {\n    return {\n      path: path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  var parsedPath = parsePath(path);\n  try {\n    var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path: path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n  return {\n    path: createPath(parsedPath)\n  };\n}\nfunction getLoaderRedirect(state, redirect) {\n  var _state$navigation = state.navigation,\n    formMethod = _state$navigation.formMethod,\n    formAction = _state$navigation.formAction,\n    formEncType = _state$navigation.formEncType,\n    formData = _state$navigation.formData;\n  var navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    return match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) ||\n    // If this route had a pending deferred cancelled it must be revalidated\n    cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    }) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach(function (_ref10, key) {\n    var _ref24 = _slicedToArray(_ref10, 2),\n      href = _ref24[0],\n      match = _ref24[1];\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      var shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  var currentUrl = createURL(currentLocation);\n  var currentParams = currentMatch.params;\n  var nextUrl = createURL(location);\n  var nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  var defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) ||\n  // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() ||\n  // Search params affect all loaders\n  currentUrl.search !== nextUrl.search ||\n  // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n  if (match.route.shouldRevalidate) {\n    var routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl: currentUrl,\n      currentParams: currentParams,\n      nextUrl: nextUrl,\n      nextParams: nextParams\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate\n    }));\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return defaultShouldRevalidate;\n}\nfunction callLoaderOrAction(_x49, _x50, _x51, _x52, _x53) {\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(type, request, match, skipRedirects, isRouteRequest) {\n    var resultType, result, reject, abortPromise, onReject, handler, status, location, data, contentType;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          if (skipRedirects === void 0) {\n            skipRedirects = false;\n          }\n          if (isRouteRequest === void 0) {\n            isRouteRequest = false;\n          }\n          abortPromise = new Promise(function (_, r) {\n            return reject = r;\n          });\n          onReject = function onReject() {\n            return reject();\n          };\n          request.signal.addEventListener(\"abort\", onReject);\n          _context16.prev = 5;\n          handler = match.route[type];\n          invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n          _context16.next = 10;\n          return Promise.race([handler({\n            request: request,\n            params: match.params\n          }), abortPromise]);\n        case 10:\n          result = _context16.sent;\n          _context16.next = 17;\n          break;\n        case 13:\n          _context16.prev = 13;\n          _context16.t0 = _context16[\"catch\"](5);\n          resultType = ResultType.error;\n          result = _context16.t0;\n        case 17:\n          _context16.prev = 17;\n          request.signal.removeEventListener(\"abort\", onReject);\n          return _context16.finish(17);\n        case 20:\n          if (!(result instanceof Response)) {\n            _context16.next = 42;\n            break;\n          }\n          // Process redirects\n          status = result.status;\n          location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n          // without unwrapping\n          if (!isRouteRequest) {\n            _context16.next = 25;\n            break;\n          }\n          throw result;\n        case 25:\n          if (!(status >= 300 && status <= 399 && location != null)) {\n            _context16.next = 29;\n            break;\n          }\n          if (!skipRedirects) {\n            _context16.next = 28;\n            break;\n          }\n          throw result;\n        case 28:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.redirect,\n            status: status,\n            location: location,\n            revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n          });\n        case 29:\n          contentType = result.headers.get(\"Content-Type\");\n          if (!(contentType && contentType.startsWith(\"application/json\"))) {\n            _context16.next = 36;\n            break;\n          }\n          _context16.next = 33;\n          return result.json();\n        case 33:\n          data = _context16.sent;\n          _context16.next = 39;\n          break;\n        case 36:\n          _context16.next = 38;\n          return result.text();\n        case 38:\n          data = _context16.sent;\n        case 39:\n          if (!(resultType === ResultType.error)) {\n            _context16.next = 41;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: resultType,\n            error: new ErrorResponse(status, result.statusText, data),\n            headers: result.headers\n          });\n        case 41:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.data,\n            data: data,\n            statusCode: result.status,\n            headers: result.headers\n          });\n        case 42:\n          if (!(resultType === ResultType.error)) {\n            _context16.next = 44;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: resultType,\n            error: result\n          });\n        case 44:\n          if (!(result instanceof DeferredData)) {\n            _context16.next = 46;\n            break;\n          }\n          return _context16.abrupt(\"return\", {\n            type: ResultType.deferred,\n            deferredData: result\n          });\n        case 46:\n          return _context16.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result\n          });\n        case 47:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee15, null, [[5, 13, 17, 20]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction createRequest(location, signal, submission) {\n  var url = createURL(location).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType,\n      formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator4 = _createForOfIteratorHelper(formData.entries()),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = _slicedToArray(_step4.value, 2),\n        key = _step4$value[0],\n        value = _step4$value[1];\n      invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n      searchParams.append(key, value);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, _defineProperty({}, boundaryMatch.route.id, error)); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = _slicedToArray(revalidatingFetchers[index], 3),\n      key = _revalidatingFetchers[0],\n      match = _revalidatingFetchers[2];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  matches.forEach(function (match) {\n    var id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || r.path === \"\" || r.path === \"/\";\n  }) || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\nfunction getMethodNotAllowedResult(path) {\n  var href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction resolveDeferredResults(_x54, _x55, _x56, _x57, _x58, _x59) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index;\n    return _regeneratorRuntime().wrap(function _callee16$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(index) {\n            var result, match, currentMatch, isRevalidatingLoader;\n            return _regeneratorRuntime().wrap(function _loop$(_context17) {\n              while (1) switch (_context17.prev = _context17.next) {\n                case 0:\n                  result = results[index];\n                  match = matchesToLoad[index];\n                  currentMatch = currentMatches.find(function (m) {\n                    return m.route.id === match.route.id;\n                  });\n                  isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n                  if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                    _context17.next = 7;\n                    break;\n                  }\n                  _context17.next = 7;\n                  return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                    if (result) {\n                      results[index] = result || results[index];\n                    }\n                  });\n                case 7:\n                case \"end\":\n                  return _context17.stop();\n              }\n            }, _loop);\n          });\n          index = 0;\n        case 2:\n          if (!(index < results.length)) {\n            _context18.next = 7;\n            break;\n          }\n          return _context18.delegateYield(_loop(index), \"t0\", 4);\n        case 4:\n          index++;\n          _context18.next = 2;\n          break;\n        case 7:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee16);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x60, _x61, _x62) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          if (unwrap === void 0) {\n            unwrap = false;\n          }\n          _context19.next = 3;\n          return result.deferredData.resolveData(signal);\n        case 3:\n          aborted = _context19.sent;\n          if (!aborted) {\n            _context19.next = 6;\n            break;\n          }\n          return _context19.abrupt(\"return\");\n        case 6:\n          if (!unwrap) {\n            _context19.next = 14;\n            break;\n          }\n          _context19.prev = 7;\n          return _context19.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.unwrappedData\n          });\n        case 11:\n          _context19.prev = 11;\n          _context19.t0 = _context19[\"catch\"](7);\n          return _context19.abrupt(\"return\", {\n            type: ResultType.error,\n            error: _context19.t0\n          });\n        case 14:\n          return _context19.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.data\n          });\n        case 15:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee17, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n  return matches.slice(-1)[0];\n}\nfunction createURL(location) {\n  var base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  var href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"names":["Action","PopStateEventType","createMemoryHistory","options","_options","_options$initialEntri","initialEntries","initialIndex","_options$v5Compat","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning$1","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","_window$location","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","_parsePath","parsePath","substr","_parsePath$pathname","_parsePath$search","_parsePath$hash","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","warning","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_extends","_ref","_ref$pathname","_ref$search","_ref$hash","path","parsedPath","searchIndex","getLocation","validateLocation","_options2","_options2$window","defaultView","_options2$v5Compat","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","concat","_toConsumableArray","id","join","invariant","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","_compilePath","compilePath","_compilePath2","_slicedToArray","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","_ref11","toPathname","_ref11$search","_ref11$hash","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","_Error","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","_wrapNativeSuper","DeferredData","_this","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref12","_defineProperty","trackPromise","_this2","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","_this3","abort","v","k","_resolveData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this4","wrap","_callee$","_context","prev","next","resolve","sent","abrupt","stop","resolveData","_x","size","_ref2","_ref13","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","_getNotFoundMatches","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","_state$navigation$for","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","_x2","_x3","_navigate","_callee2","opts","_normalizeNavigateOpt2","submission","_callee2$","_context2","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","_x4","_x5","_x6","_startNavigation","_callee3","loadingNavigation","_getNotFoundMatches2","notFoundMatches","_route","request","pendingActionData","actionOutput","_yield$handleLoaders","shortCircuited","_callee3$","_context3","saveScrollPosition","cancelActiveDeferreds","isHashChangeOnly","createRequest","findNearestBoundary","handleAction","pendingActionError","handleLoaders","_x7","_x8","_x9","_x10","_x11","_handleAction","_callee4","result","actionMatch","redirectNavigation","boundaryMatch","_callee4$","_context4","getTargetMatch","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","isDeferredResult","_x12","_x13","_x14","_x15","_x16","_x17","_x18","_x19","_handleLoaders","_callee5","_getMatchesToLoad","_getMatchesToLoad2","matchesToLoad","revalidatingFetchers","_yield$callLoadersAnd","results","loaderResults","fetcherResults","_processLoaderData","didAbortFetchLoads","_callee5$","_context5","getMatchesToLoad","routeId","_ref14","fetcher","revalidatingFetcher","_ref3","_ref15","callLoadersAndMaybeResolveData","_ref4","_ref16","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","_normalizeNavigateOpt","handleFetcherAction","handleFetcherLoader","_x20","_x21","_x22","_x23","_x24","_handleFetcherAction","_callee6","_getMethodNotAllowedR","_error2","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_getMatchesToLoad3","_getMatchesToLoad4","_yield$callLoadersAnd2","_redirectNavigation","_processLoaderData2","doneFetcher","_callee6$","_context6","_ref5","_ref17","staleKey","_ref6","_ref18","_ref7","_ref19","_x25","_x26","_x27","_x28","_handleFetcherLoader","_callee7","_callee7$","_context7","resolveDeferredData","t0","_x29","_x30","_x31","_startRedirectNavigation","_callee8","redirectHistoryAction","_callee8$","_context8","_x32","_x33","_x34","_x35","_callLoadersAndMaybeResolveData","_callee9","currentMatches","fetchersToLoad","_callee9$","_context9","all","_ref8","_ref20","resolveDeferredResults","_ref9","_ref21","_cancelledDeferredRou","markFetchersDone","keys","_iterator","_createForOfIteratorHelper","_step","err","f","doneKeys","_iterator2","_step2","landedId","yeetedKeys","_iterator3","_step3","_step3$value","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","_x36","_query","_callee10","_yield$queryImpl","_callee10$","_context10","queryImpl","queryRoute","_x37","_x38","_queryRoute","_callee11","_yield$queryImpl2","routeData","_callee11$","_context11","values","find","_x39","_x40","_queryImpl","_callee12","_matchRequest","shortCircuitState","_result","_callee12$","_context12","method","matchRequest","submit","loadRouteData","actionHeaders","_x41","_x42","_x43","_x44","_submit","_callee13","isRouteRequest","_boundaryMatch","_context13","context","_callee13$","_context14","URL","Location","statusCode","loaderHeaders","_x45","_x46","_x47","_x48","_loadRouteData","_callee14","_callee14$","_context15","getLoaderMatchesUntilBoundary","processRouteLoaderData","req","_getNotFoundMatches3","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isFetcher","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","_state$navigation","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","_ref24","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","_x49","_x50","_x51","_x52","_x53","_callLoaderOrAction","_callee15","type","skipRedirects","resultType","onReject","handler","contentType","_callee15$","_context16","finish","text","deferred","toUpperCase","body","Request","URLSearchParams","_iterator4","_step4","_step4$value","foundError","_processRouteLoaderDa","_revalidatingFetchers","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","_x54","_x55","_x56","_x57","_x58","_x59","_resolveDeferredResults","_callee16","_loop","_callee16$","_context18","isRevalidatingLoader","_loop$","_context17","delegateYield","_x60","_x61","_x62","_resolveDeferredData","_callee17","unwrap","_callee17$","_context19","unwrappedData","getAll","handle","origin"],"sources":["D:\\10billiontrees\\frontend\\node_modules\\@remix-run\\router\\history.ts","D:\\10billiontrees\\frontend\\node_modules\\@remix-run\\router\\utils.ts","D:\\10billiontrees\\frontend\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  invariant,\n  isRouteErrorResponse,\n  matchRoutes,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouterMatch] for a revalidating fetcher.load()\n */\ntype RevalidatingFetcher = [string, string, AgnosticDataRouteMatch];\n\n/**\n * Tuple of [href, DataRouteMatch] for an active fetcher.load()\n */\ntype FetchLoadMatch = [string, AgnosticDataRouteMatch];\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(\n        result,\n        redirectNavigation,\n        opts && opts.replace\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        const fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) => callLoaderOrAction(\"loader\", request, m)),\n      ...fetchersToLoad.map(([, href, match]) =>\n        callLoaderOrAction(\"loader\", createRequest(href, request.signal), match)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let { location, result } = await queryImpl(request);\n    if (result instanceof Response) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  async function queryRoute(request: Request, routeId: string): Promise<any> {\n    let { result } = await queryImpl(request, routeId);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // While we always re-throw Responses returned from loaders/actions\n      // directly for route requests and prevent the unwrapping into an\n      // ErrorResponse, we still need this for error cases _prior_ the\n      // execution of the loader/action, such as a 404/405 error.\n      if (isRouteErrorResponse(error)) {\n        return new Response(error.data, {\n          status: error.status,\n          statusText: error.statusText,\n        });\n      }\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText,\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(\n    request: Request,\n    routeId?: string\n  ): Promise<{\n    location: Location;\n    result: Omit<StaticHandlerContext, \"location\"> | Response;\n  }> {\n    invariant(\n      request.method !== \"HEAD\",\n      \"query()/queryRoute() do not support HEAD requests\"\n    );\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    let { location, matches, shortCircuitState } = matchRequest(\n      request,\n      routeId\n    );\n\n    try {\n      if (shortCircuitState) {\n        return { location, result: shortCircuitState };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(\n          request,\n          matches,\n          getTargetMatch(matches, location),\n          routeId != null\n        );\n        return { location, result };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: {\n          ...result,\n          actionData: null,\n          actionHeaders: {},\n        },\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return { location, result: e };\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(pendingActionError || {})[0]\n    ).filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(\"loader\", request, m, true, isRouteRequest)\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function matchRequest(\n    req: Request,\n    routeId?: string\n  ): {\n    location: Location;\n    matches: AgnosticDataRouteMatch[];\n    routeMatch?: AgnosticDataRouteMatch;\n    shortCircuitState?: Omit<StaticHandlerContext, \"location\">;\n  } {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n    if (matches && routeId) {\n      matches = matches.filter((m) => m.route.id === routeId);\n    }\n\n    // Short circuit with a 404 if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error,\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {},\n        },\n      };\n    }\n\n    return { location, matches };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  skipRedirects: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(\n      405,\n      \"Method Not Allowed\",\n      `No action found for [${href}]`\n    ),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    !hasNakedIndexQuery(search || \"\")\n  ) {\n    return matches.slice(-2)[0];\n  }\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}